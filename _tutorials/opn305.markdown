---
layout: tutorial
comments: true
title: "OPN305 OpenSearch: Securing your OpenSearch Data"
sitemap: false
---

Today‚Äôs builder‚Äôs session will leverage [Gitpod](https://www.gitpod.io/) (or Docker Compose, if you wish) to launch a container instance that hosts a single node of an [OpenSearch](https://opensearch.org/docs/latest/opensearch/index/) cluster coupled with [OpenSearch Dashboards](https://opensearch.org/docs/latest/dashboards/index/). The container image comes preinstalled with multiple plugins from the [OpenSearch project](https://opensearch.org/). One of those plugins is the [Security plugin](https://opensearch.org/docs/latest/security-plugin/index/). The session will focus specifically on the security plugin and how you can leverage the plugin for fine grained access controls on your indexes.

## Tasks

The builder‚Äôs session is divided into specific tasks to help you understand how you can leverage the security plugin to help control the scope of data and the operations that one user or group can perform on your data in your cluster. Many customers find that the fine grained access controls for the plugin can give customers a mechanism that ensures data access is scoped to the desired users. The plugin includes integrations with SAML providers and other authentication sources and it also has a local user database. This session focuses on the provisioning of a local user database to simulate entitlements such as those that are normally implemented in production deployments. You will perform the following activities with these instructions and you will have an OpenSearch person at your table to help you through any issues that may arise while going through these instructions. The task are broken down into the following actions:


1. Get setup with Gitpod and create the cluster from an existing GitHub project
2. Load data into the cluster using python scripts and other linux tools like wget
3. Create users in the local user database with basic authentication
4. Configure audit logging so you can see the actions of your users and verify compliance
5. Configure roles at the index level and the document and field levels
6. Assign the roles to users created in basic authentication
7. Exercise queries in OpenSearch Dashboards to view the data and the effects of the role
assignments for particular users

## Let‚Äôs create the cluster!

Today‚Äôs session will leverage [Gitpod](https://www.gitpod.io/) or [Docker Compose](https://docs.docker.com/compose/) to launch a container instance that hosts a single node of an [OpenSearch](https://opensearch.org/docs/latest/opensearch/index/) cluster coupled with [OpenSearch Dashboards](https://opensearch.org/docs/latest/opensearch/index/). The container image comes preinstalled with multiple plugins from the [OpenSearch project](https://opensearch.org/). One of those plugins is the [Security plugin](https://opensearch.org/docs/latest/security-plugin/index/). The session will focus specifically on this plugin and how you can leverage the plugin for fine grained access controls on your indexes.

### Starting the cluster with Gitpod

Click on the "Open in Gitpod" button below and it will launch an instance of OpenSearch in your browser account.
{: .gitpod-hidden }

[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://github.com/opensearch-project/project-website/tree/opn305-demo)
{: .gitpod-hidden }

Once you click on the button, the container will launch in Gitpod. You should observe the following as
the Gitpod environment spins up:
{: .gitpod-hidden }

![GitPod Loading](/assets/media/tutorials/opn305/gitpod-pull.png){: .img-fluid.gitpod-hidden}

Be patient while the container launches. You will see these instructions come up in the preview window on top and terminal on the bottom:
{: .gitpod-hidden }

![GitPod Loading](/assets/media/tutorials/opn305/gitpod-layout.png){: .img-fluid.gitpod-hidden}

Looks like you're running in GitPod - here is the status of OpenSearch Dashboards.
{: .gitpod-visible}

When this document is viewed in Gitpod, it will indicate when OpenSearch Dashboards is ready for use.
{: .gitpod-hidden}

üõë Please wait while OpenSearch Dashboards is loading. This may take a few moments.
{: .gitpod-visible.gitpod-dashboards-ready-hidden }

‚úÖ OpenSearch Dashboards is ready, you can proceed to the next step.
{: .gitpod-visible.gitpod-dashboards-ready-visible }

Now, let's launch OpenSearch Dashboards. Right click on the link below and *open it in a new window*:
{: .gitpod-visible.gitpod-dashboards-ready-visible }

![GitPod Loading](/assets/media/tutorials/opn305/open-in-new-window.png){: .img-fluid.gitpod-visible.gitpod-dashboards-ready-visible}

‚û°Ô∏è <a href="http://localhost:5601/" class="gitpod-replace-port" data-port="5601">Launch OpenSearch Dashboards</a>.
{: .gitpod-visible.gitpod-dashboards-ready-visible }



### Starting the cluster with Docker Compose
{: .gitpod-hidden }

If you are using [Docker Desktop](https://www.docker.com/products/docker-desktop) directly on your machine, keep in mind that this will download several hundred megabytes of container images before you can begin, so it's suggested that you spin up a cloud instance with Docker installed or use Gitpod as mentioned above, especially if you are on an unreliable connection.
{: .gitpod-hidden }


1. Setup your Docker host environment
    * macOS & Windows: In Docker Preferences > Resources, set RAM to at least 4 GB.
    * Linux: Ensure vm.max_map_count is set to at least 262144 as per the documentation.
2. In a terminal window, run download the Docker compose file: 

    ```wget https://raw.githubusercontent.com/opensearch-project/project-website/opn305-demo/_demo/docker-compose.yml```
3. In a terminal window, start the cluster by running: 

    ```docker-compose up```
4. Be patient while everything starts up
5. Navigate to `http://localhost:5601/` (or the address/hostname of your instance) for OpenSearch Dashboards in a web browser. This may take a few moments to full be ready.
{: .gitpod-hidden }

Once the container has started up, you will observe and even that states ‚Äúhttp server running at
http://0:5601‚Äù. Port 5601 is where your OpenSearch dashboard is listening for requests.
{: .gitpod-hidden }

## Log into OpenSearch Dashboards

You should see a sign on screen for OpenSearch Dashboards. The user name is `admin` and the `password`
is admin for this image. Keep in mind, this password is only for demonstration purposes and you should
create passwords that are complex and not easy to figure out. Your organization will most likely have
standards and you should adhere to a strong password to keep things secure even in private
environments.

![Login to OpenSearch](/assets/media/tutorials/shared/login.jpg){: .img-fluid}

## Import the movies data into the OpenSearch cluster

Now, switch over to the terminal. 

In Gitpod, this will be in the lower section of your workspace.
{: .gitpod-visible }

If you are using Docker Compose, you'll need to use your favourite terminal emulator. If running Docker on your local machine, you can do this directly. If you are running OpenSearch in a cloud instance, you'll need SSH into that instance. 
{: .gitpod-hidden }

## Download data and scripts

The first thing that you are going to do is pull the data set from the location in which it is hosted. You
will use `wget` to pull the dataset to your local storage on the container. Execute the following command
in your bash shell:

```
wget https://search-sa-log-solutions.s3-us-east2.amazonaws.com/fluentd-kinesis-logstash/data/2013Imdb.txt
```
Observe the following:

![Get the data](/assets/media/tutorials/opn305/wget.png){: .img-fluid}

Next, you need to download two different scripts. The first script will add the index template to the
cluster by leveraging the [_template](https://opensearch.org/docs/latest/opensearch/index-templates/) endpoint. The second script will parse the 2013imdb.txt file that
you downloaded and it will convert it into [_bulk](https://opensearch.org/docs/latest/opensearch/rest-api/document-apis/bulk/) API calls against the cluster.

Go ahead and download the two files with the following commands:

```
wget https://search-sa-log-solutions.s3-us-east2.amazonaws.com/builders/put-mappings.py
wget https://search-sa-log-solutions.s3-us-east2.amazonaws.com/builders/put-data.py
```

Observe the following output:

![Get the data](/assets/media/tutorials/opn305/wget_scripts.png){: .img-fluid}

## Let‚Äôs create some users!

Once you are signed in on the cluster, you should see the following screen. Navigate to the Security
plugin.


![create users](/assets/media/tutorials/opn305/create_users.png){: .img-fluid}

For our session on security, lets lay a solid foundation for entitlements; otherwise known as permissions
or roles that have permissions to do things on a cluster. You create these users so that you, as an
admin, can monitor behaviours and ensure that users only have the permissions they need. Audit logs
help you verify the permissions you create are performing as intended. The role of an admin user
typically is limited in the fact that the admin user can issue entitlements and revoke them. Outside of
that, admin users should never be used for programmatic access outside of the scope of entitlements as
a best practice.

You are going to create the following users:

1. A power user ‚Äì the power user will have the all_access role assigned to it. Typically, a power
user can create dashboards and visualizations within assigned tenants, have CRUD access to all
indexes and settings outside of the Security plugin on the cluster.
2. A read only limited access user assigned to one index ‚Äì this user can only read data on a specific
index and the user can see all fields in the documents.
3. A read only document level and field level security user ‚Äì this user has access to the same single
index the limited access user has and the user is further limited by specific documents matching
a specific genre of movies. The user will not have access to the actors field in the movies index
that you will create shortly.

Once you click on the Security link, you should see the following page. Navigate to the Internal users
link found on the left hand side of the browser window and click on the link.

![internal users](/assets/media/tutorials/opn305/security_navigate_internal_users.png){: .img-fluid}


## Create the power user

You will be presented with a form. Fill in the following value for the user name:
`power_user_non_admin`. Assign a password and go ahead and create the user.

![power_user_non_admin](/assets/media/tutorials/opn305/power_user_all_access.png){: .img-fluid}

Scroll to the bottom of the form, leave the other fields alone for now and click on the create button and
observe that the power user got created.

![user created](/assets/media/tutorials/opn305/user_created.png){: .img-fluid}

![user created alert](/assets/media/tutorials/opn305/power_user_created.png){: .img-fluid}

Repeat this activity for the next two users.

## Create the read only index level user

Create a user called `read_only_index_level` user. Do not map them.

![read_only_index_level user](/assets/media/tutorials/opn305/read_only_index_level.png){: .img-fluid}

## Create the read only document level field level user

Create a user called `read_only_dls_fls` user.

![read_only_dls_fls user](/assets/media/tutorials/opn305/read_only_dls_fls.png){: .img-fluid}

## Observe all three users are created

In the overview, you should see all three users created.

![read_only_dls_fls user](/assets/media/tutorials/opn305/three_users_observe.png){: .img-fluid}


## Stay Connected!

Find Kyle on Twitter at [@stockholmux](https://twitter.com/stockholmux), on [LinkedIn](https://www.linkedin.com/in/kyle-davis-search/), or reach out via email at kyledvs@amazon.com

Find Kevin on Twitter at @example, on [LinkedIn](https://www.linkedin.com/in/kevinmichaelfallis/), or reach out via email at kffallis@amazon.com