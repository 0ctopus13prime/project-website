const {
     existsSync 
} = require('node:fs');
const fs = require('node:fs/promises');
const path = require('path');
const matter = require('gray-matter');

function exitWithUsage(warnMessage = '', exitCode = 0) {
    if (warnMessage !== '') {
        console.warn(warnMessage);
    }
    console.info('Creates the required file system boilerplate for a new OpenSearch Con.');
    console.info('Usage $ npm run opensearchcon:new -- FOUR_DIGIT_YEAR_ARG LOCATION_NAME[ COMMA_SEPARATED_LIST_OF_SECTIONS]');
    console.info('For Example to create a new opensearchcon file system boilerplate for 2024 in Europe with all available sections:');
    console.info("\t$ npm run opensearchcon:new -- 2024 europe speakers,sessions,exhibitors,workshops,unconference");
    console.info("\n\nIf the COMMA_SEPARATED_LIST_OF_SECTIONS is omitted then the default set of exhibitors,speakers,sessions,unconferenceworkshops is used.");
    console.info("\tThe sections list must include at least exhibitors, sessions, and speakers. The unconference, and workshops are considered optional even though they are present by default.");
    console.info("\n\nA valid location name consists of patterns of word character class strings optionally separated by a hyphen.")
    console.info("\tFor example: north-america, or europe");
    console.info("\n\nThe conference_id will be generated by concatenation of the location name to the year separated by a hyphen");
    console.info("\tFor example: 2024-europe, or 2024-north-america");
    process.exit(exitCode);
}

function isValidYear(year) {
    const yearPattern = /^\d{4}$/;
    return yearPattern.test(year);
}

function isValidLocationName(location) {
    const locationPattern = /^\w+(-\w+)*$/;
    return locationPattern.test(location);
}

function isValidSectionList(sections) {
    const sectionList = sections?.split?.(',') ?? [];
    if (sectionList.length === 0) {
        return false;
    }
    const optionalList = ['unconference', 'workshops'];
    const requiredList = ['exhibitors', 'sessions', 'speakers'];
    const defaultList = [...requiredList, ...optionalList];
    sectionList.sort();
    if (sectionList.length === defaultList.length) {
        const hasAllSections = sectionList.every((value, index) => value === defaultList[index]);
        return hasAllSections;
    }
    const hasRequiredSections = requiredList.every(value => sectionList.includes(value));
    return hasRequiredSections;
}

function upperCaseFirstChar(s) {
    const ucFirst = `${s.charAt(0).toUpperCase()}${s.substring(1)}`;
    return ucFirst;
}

function getReadableLocationName(location) {
    const readable = location.split(/[^a-z0-9]+/ig).map(upperCaseFirstChar).join(' ');
    return readable;
}

function getInputArgs(argv) {
    const defaultSections = "exhibitors,speakers,sessions,unconference,workshops";
    const [, , conferenceYear, conferenceLocation, sections = defaultSections] = argv;
    if (!isValidYear(conferenceYear)) {
        exitWithUsage(`Invalid input value for conference year given: "${conferenceYear}"`, 1);
    }
    if (!isValidLocationName(conferenceLocation)) {
        exitWithUsage(`Invalid input value for conference location given: "${conferenceLocation}"`, 1);
    }
    if (!isValidSectionList(sections)) {
        exitWithUsage(`Invalid input value for conference sections list given: "${sections}"`, 1);
    }
    return {
        conferenceYear,
        conferenceLocation,
        sections,
    };
}

async function loadFrontMatterData(filePath) {
    const fileData = await fs.readFile(filePath, { encoding: 'utf8' });
    const parsedData = matter(fileData);
    return parsedData;
}

async function writeObjectAsFrontMatter(frontMatterData, filePath) {
    const fileData = matter.stringify(frontMatterData.content, frontMatterData.data);
    return await fs.writeFile(filePath, fileData, 'utf8');
}

function createSectionCollectionsPaths(sections, baseDir) {
    const splitSections = sections.split(',');
    const collectionsPaths = splitSections.reduce((carry, current) => {
        const collectionPath = current !== 'speakers' ? 
            path.join(baseDir, `_opensearchcon_${current}`) : 
            path.join(baseDir, '_community_members');
        return {
            ...carry,
            [current]: collectionPath,
        };
    }, {});
    return collectionsPaths;
}

function createEventPagesPaths(sections, conferenceBaseDir, sampleBaseDir) {
    const splitSections = sections.split(',');
    const landingPagePath = conferenceBaseDir;
    const landingSamplePath = path.join(sampleBaseDir, '_sample-index.md');
    const pagesPaths = splitSections.reduce((carry, current) => {
        const pagePath = path.join(conferenceBaseDir, current);
        const sampleDataPath = path.join(sampleBaseDir, `_sample-year-location-${current}`, '_sample-index.md');
        return {
            ...carry,
            [current]: {
                pagePath,
                sampleDataPath,
            },
        };
    }, {
        landingPage: {
            pagePath: landingPagePath,
            sampleDataPath: landingSamplePath,
        },
    });
    return pagesPaths;
}


async function writeEventPagesBoilerplate(pagesPathsConfig, boilerplateOverrides) {
    await Promise.all(
        Object.entries(pagesPathsConfig).map(async ([section, paths]) => {
            const { pagePath, sampleDataPath } = paths;
            if (!existsSync(pagePath)) {
                const createdDir = await fs.mkdir(pagePath, { recursive: true });
                console.log(`Created events subdir ${createdDir}`);
            }
            console.log(`Loading sample section data from ${sampleDataPath}`);
            const sectionSampleData = await loadFrontMatterData(sampleDataPath);
            const boilerplateData = {
                data: {
                    ...sectionSampleData.data,
                    ...boilerplateOverrides[section].data,
                },
                content: boilerplateOverrides[section].hasOwnProperty('content') ? boilerplateOverrides[section].content : sectionSampleData.content,
            };
            const pageFilePath = path.join(pagePath, 'index.md');
            console.log(`Writing events section page: ${pageFilePath}`);
            console.dir(boilerplateData);
            return await writeObjectAsFrontMatter(boilerplateData, pageFilePath);
        })
    );
}

async function writeCollectionPagesBoilerplate(collectionPathsConfig, boilerplateOverrides) {
    await Promise.all(
        Object.entries(collectionPathsConfig).map( async ([section, sectionPath]) => {
            const overrides = boilerplateOverrides[section];
            if (section !== 'speakers') {
                const conferenceId = overrides.data.conference_id;
                const placeholderEntryFilename = `${conferenceId}-placeholder-${section}.md`;
                const placeholderEntryPath = path.join(sectionPath, placeholderEntryFilename);
                const sampleDataPath = path.join(sectionPath, '_sample.md');
                console.log(`Loading sample collection data from ${sampleDataPath}`);
                const sampleData = await loadFrontMatterData(sampleDataPath);
                console.dir(sampleData);
                const boilerplateData = {
                    data: {
                        ...sampleData.data,
                        ...overrides.data,
                    },
                    content: overrides.hasOwnProperty('content') ? overrides.content : sampleData.content,
                };
                console.log(`Writing placeholder collection entry at ${placeholderEntryPath}`);
                console.dir(boilerplateData);
                return await writeObjectAsFrontMatter(boilerplateData, placeholderEntryPath);
            } else {
                return Promise.all(overrides.map(async (speakerOverride) => {
                    const conferenceId = speakerOverride.data.conference_id;
                    const placeholderEntryFilename = `${speakerOverride.data.short_name}.md`;
                    const placeholderEntryPath = path.join(sectionPath, placeholderEntryFilename);
                    const sampleDataPath = path.join(sectionPath, '_sample.md');
                    console.log(`Loading sample collection data from ${sampleDataPath}`);
                    const sampleData= await loadFrontMatterData(sampleDataPath);
                    console.dir(sampleData);
                    const boilerplateData = {
                        data: {
                            ...sampleData.data,
                            ...speakerOverride.data,
                        },
                        content: speakerOverride.hasOwnProperty('content') ? speakerOverride.content : sampleData.content,
                    };
                    console.log(`Writing placeholder collection entry at ${placeholderEntryPath}`);
                    console.dir(boilerplateData);
                    return await writeObjectAsFrontMatter(boilerplateData, placeholderEntryPath);
                }));
            }
        })
    );
}

function createBreadcrumbItemsOverride(year, location, readableLocation, additionalItems = []) {
    const breadcrumbs = {
        icon: 'community',
        items: [{
            title: 'OpenSearchCon',
            url: '/events/opensearchcon/index.html',
        }, {
            title: year,
            url: `/events/opensearchcon/${year}/index.html`,
        }, {
            title: readableLocation,
            url: `/events/opensearchcon/${year}/${location}/inde.html`,
        }, ...additionalItems],
    };
    return breadcrumbs;
}

function createSectionsButtonStackOverrides(sections, year, location) {
    const splitSections = sections.split(',');
    const buttonStackConfig = splitSections.reduce((carry, current) => {
        const url = `/events/opensearchcon/${year}/${location}/${current}/index.html`;
        const label = upperCaseFirstChar(current);
        carry.push({
            label,
            url,
        });
        return carry;
    }, []);
    return buttonStackConfig;
}

async function run(inputArgs, baseDir) {
    const {conferenceYear, conferenceLocation, sections } = inputArgs;
    const conferenceId = `${conferenceYear}-${conferenceLocation}`;
    const readableLocationName = getReadableLocationName(conferenceLocation);
    const conferenceBaseDir = path.join(baseDir, 'events', 'opensearchcon', conferenceYear, conferenceLocation);
    const samplePagesBaseDir = path.join(baseDir, 'events', 'opensearchcon', 'archive', '_sample-year', '_sample-year-location');
    const pagesPaths = createEventPagesPaths(sections, conferenceBaseDir, samplePagesBaseDir);
    const collectionsPaths = createSectionCollectionsPaths(sections, baseDir);
    const placeholderSpeakers = [{
        short_name: `placeholder-speaker-${conferenceId}-1`,
        name: `Placeholder Speaker ${conferenceYear} ${readableLocationName} 1`,
        photo: '/assets/media/community/members/no-image-available.svg',
        primary_title: `Placeholder Speaker ${conferenceYear} ${readableLocationName} 1`,
        title: `OpenSearch Project Community Member: Placeholder Speaker ${conferenceYear} ${readableLocationName} 1`,
        breadcrumbs: createBreadcrumbItemsOverride(conferenceYear, conferenceLocation, readableLocationName, [{
            title: 'Speakers',
            url: `/events/opensearchcon/${conferenceYear}/${conferenceLocation}/speakers/index.html`,
        }, {
            title: `Placeholder Speaker ${conferenceYear} ${readableLocationName} 1`,
            url: `/events/opensearchcon/${conferenceYear}/${conferenceLocation}/placeholder-speaker-1.html`,
        }]),
        job_title_and_company: 'Job title at Company',
        keynote_speaker: conferenceId,
        session_track: {
            conference_id: conferenceId,
            name: 'Community',
        },
        permalink: `/events/opensearchcon/${conferenceYear}/${conferenceLocation}/placeholder-speaker-1.html`,
        conference_id: conferenceId,
    }, {
        short_name: `placeholder-speaker-${conferenceId}-2`,
        name: `Placeholder Speaker ${conferenceYear} ${readableLocationName} 2`,
        photo: '/assets/media/community/members/no-image-available.svg',
        primary_title: `Placeholder Speaker ${conferenceYear} ${readableLocationName} 2`,
        title: `OpenSearch Project Community Member: Placeholder Speaker ${conferenceYear} ${readableLocationName} 2`,
        breadcrumbs: createBreadcrumbItemsOverride(conferenceYear, conferenceLocation, readableLocationName, [{
            title: 'Speakers',
            url: `/events/opensearchcon/${conferenceYear}/${conferenceLocation}/speakers/index.html`,
        }, {
            title: `Placeholder Speaker ${conferenceYear} ${readableLocationName} 1`,
            url: `/events/opensearchcon/${conferenceYear}/${conferenceLocation}/placeholder-speaker-2.html`,
        }]),
        job_title_and_company: 'Job title at Company',
        keynote_speaker: false,
        session_track: {
            conference_id: conferenceId,
            name: 'Community',
        },
        permalink: `/events/opensearchcon/${conferenceYear}/${conferenceLocation}/placeholder-speaker-2.html`,
        conference_id: conferenceId,
    }];
    const sectionPagesOverrides = {
        landingPage: {
            data: {
                title: `OpenSearchCon ${conferenceYear}: ${readableLocationName}`,
                primary_title: `OpenSearchCon ${conferenceYear}: ${readableLocationName}`,
                breadcrumbs: createBreadcrumbItemsOverride(conferenceYear, conferenceLocation, readableLocationName),
                conference_id: conferenceId,
                permalink: `/events/opensearchcon/${conferenceYear}/${conferenceLocation}/index.html`,
                redirect_from: `/events/opensearchcon/${conferenceYear}/index.html`,
                conference_sections_button_stack: createSectionsButtonStackOverrides(sections, conferenceYear, conferenceLocation),
            },
        },
        exhibitors: {
            data: {
                title: `OpenSearchCon ${conferenceYear}: ${readableLocationName} Exhibitors`,
                primary_title: `OpenSearchCon ${conferenceYear}: ${readableLocationName} Exhibitors`,
                breadcrumbs: createBreadcrumbItemsOverride(
                    conferenceYear,
                    conferenceLocation,
                    readableLocationName, [{ 
                        title: 'Exhibitors', 
                        url: `/events/opensearchcon/${conferenceYear}/${conferenceLocation}/exhibitors/index.html`
                    }]
                ),
                conference_id: conferenceId,
                permalink: `/events/opensearchcon/${conferenceYear}/${conferenceLocation}/exhibitors/index.html`,
            },
        },
        sessions: {
            data: {
                title: `OpenSearchCon ${conferenceYear}: ${readableLocationName} Session Lineup`,
                primary_title: `OpenSearchCon ${conferenceYear}: ${readableLocationName} Session Lineup`,
                breadcrumbs: createBreadcrumbItemsOverride(
                    conferenceYear,
                    conferenceLocation,
                    readableLocationName, [{ 
                        title: 'Sessions', 
                        url: `/events/opensearchcon/${conferenceYear}/${conferenceLocation}/sessions/index.html`
                    }]
                ),
                conference_id: conferenceId,
                permalink: `/events/opensearchcon/${conferenceYear}/${conferenceLocation}/sessions/index.html`
            },
        },
        speakers: {
            data: {
                title: `Meet the OpenSearchCon ${conferenceYear} Speakers`,
                primary_title: `Meet the OpenSearchCon ${conferenceYear} Speakers`,
                breadcrumbs: createBreadcrumbItemsOverride(
                    conferenceYear,
                    conferenceLocation,
                    readableLocationName, [{ 
                        title: 'Speakers', 
                        url: `/events/opensearchcon/${conferenceYear}/${conferenceLocation}/speakers/index.html`
                    }]
                ),
                conference_id: conferenceId,
                permalink: `/events/opensearchcon/${conferenceYear}/${conferenceLocation}/speakers/index.html`
            }
        },
        unconference: {
            data: {
                title: `OpenSearchCon ${conferenceYear} Session: Unconference`,
                primary_title: `OpenSearchCon ${conferenceYear} Session: Unconference`,
                breadcrumbs: createBreadcrumbItemsOverride(
                    conferenceYear,
                    conferenceLocation,
                    readableLocationName, [{ 
                        title: 'Unconference', 
                        url: `/events/opensearchcon/${conferenceYear}/${conferenceLocation}/Unconference/index.html`
                    }]
                ),
                conference_id: conferenceId,
                permalink: `/events/opensearchcon/${conferenceYear}/${conferenceLocation}/Unconference/index.html`,
            },
        },
        workshops: {
            data: {
                title: `OpenSearchCon ${conferenceYear} Workshops`,
                primary_title: `OpenSearchCon ${conferenceYear} Workshops`,
                breadcrumbs: createBreadcrumbItemsOverride(
                    conferenceYear,
                    conferenceLocation,
                    readableLocationName, [{ 
                        title: 'Workshops', 
                        url: `/events/opensearchcon/${conferenceYear}/${conferenceLocation}/Workshops/index.html`
                    }]
                ),
                conference_id: conferenceId,
                permalink: `/events/opensearchcon/${conferenceYear}/${conferenceLocation}/Workshops/index.html`,
            },
        },
    };
    const configuredPagesOverrides = sections.split(',').reduce((carry, current) => {
        return {
            ...carry,
            [current]: sectionPagesOverrides[current],
        }
    }, {});
    await writeEventPagesBoilerplate(pagesPaths, configuredPagesOverrides);

    const sectionCollectionOverrides = {
        exhibitors: {
            data: {
                conference_id: conferenceId,
                logo: '/assets/media/community/members/no-image-available.svg',
            },
        },
        sessions: {
            data: {
                primary_presenter: placeholderSpeakers[0].short_name,
                title: `OpenSearchCon ${conferenceYear} Session: Session Title`,
                primary_title: `OpenSearchCon ${conferenceYear} Session: Session Title`,
                breadcrumbs: createBreadcrumbItemsOverride(
                    conferenceYear,
                    conferenceLocation,
                    readableLocationName, [{ 
                        title: 'Sessions', 
                        url: `/events/opensearchcon/${conferenceYear}/${conferenceLocation}/sessions/index.html`
                    }, {
                        title: 'Placeholder Session',
                        url: `/events/opensearchcon/${conferenceYear}/${conferenceLocation}/sessions/placeholder-session.html`
                    }]
                ),
                permalink: `/events/opensearchcon/${conferenceYear}/${conferenceLocation}/sessions/placeholder-session.html`,
                conference_id: conferenceId,
                presenters: placeholderSpeakers.map(speaker => speaker.short_name),
            },
        },
        speakers: placeholderSpeakers.map(speaker => ({
            data: speaker,
        })),
        workshops: {
            data: {
                primary_presenter: placeholderSpeakers[1].short_name,
                title: `OpenSearchCon ${conferenceYear} Session: Session Title`,
                primary_title: `OpenSearchCon ${conferenceYear} Session: Session Title`,
                breadcrumbs: createBreadcrumbItemsOverride(
                    conferenceYear,
                    conferenceLocation,
                    readableLocationName, [{ 
                        title: 'Unconference', 
                        url: `/events/opensearchcon/${conferenceYear}/${conferenceLocation}/workshops/index.html`
                    }, {
                        title: 'Placeholder Workshop',
                        url: `/events/opensearchcon/${conferenceYear}/${conferenceLocation}/workshops/placeholder-workshop.html`
                    }]
                ),
                permalink: `/events/opensearchcon/${conferenceYear}/${conferenceLocation}/workshops/placeholder-workshop.html`,
                conference_id: conferenceId,
                presenters: [placeholderSpeakers[1].short_name],
            },
        },
    };
    const configuredCollectionOverrides = sections.split(',').reduce((carry, current) => {
        if (!sectionCollectionOverrides.hasOwnProperty(current)) {
            return carry;
        }
        return {
            ...carry,
            [current]: sectionCollectionOverrides[current],
        };
    }, {});
    return await writeCollectionPagesBoilerplate(collectionsPaths, configuredCollectionOverrides);
}

if (process.argv.length === 2) {
    exitWithUsage();
} else if (process.argv.length >= 4) {
    const validatedInputArgs = getInputArgs(process.argv);
    run(validatedInputArgs, __dirname).then(console.log).catch(console.error);
} else {
    exitWithUsage(`Incomplete input arguments`, 1);
}

